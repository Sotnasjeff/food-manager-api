// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: service_movies_manager_api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MovieServiceClient is the client API for MovieService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieServiceClient interface {
	CreateMovie(ctx context.Context, in *CreateMovieRequest, opts ...grpc.CallOption) (*CreateMovieResponse, error)
	CreateMovieStream(ctx context.Context, opts ...grpc.CallOption) (MovieService_CreateMovieStreamClient, error)
	CreateMovieBidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (MovieService_CreateMovieBidirectionalStreamClient, error)
	ListAllMovies(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*ListMoviesResponse, error)
	GetMovieById(ctx context.Context, in *GetMovieByIdRequest, opts ...grpc.CallOption) (*GetMovieByIdResponse, error)
}

type movieServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieServiceClient(cc grpc.ClientConnInterface) MovieServiceClient {
	return &movieServiceClient{cc}
}

func (c *movieServiceClient) CreateMovie(ctx context.Context, in *CreateMovieRequest, opts ...grpc.CallOption) (*CreateMovieResponse, error) {
	out := new(CreateMovieResponse)
	err := c.cc.Invoke(ctx, "/pb.MovieService/CreateMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) CreateMovieStream(ctx context.Context, opts ...grpc.CallOption) (MovieService_CreateMovieStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MovieService_ServiceDesc.Streams[0], "/pb.MovieService/CreateMovieStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &movieServiceCreateMovieStreamClient{stream}
	return x, nil
}

type MovieService_CreateMovieStreamClient interface {
	Send(*CreateMovieRequest) error
	CloseAndRecv() (*ListMoviesResponse, error)
	grpc.ClientStream
}

type movieServiceCreateMovieStreamClient struct {
	grpc.ClientStream
}

func (x *movieServiceCreateMovieStreamClient) Send(m *CreateMovieRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *movieServiceCreateMovieStreamClient) CloseAndRecv() (*ListMoviesResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ListMoviesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *movieServiceClient) CreateMovieBidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (MovieService_CreateMovieBidirectionalStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MovieService_ServiceDesc.Streams[1], "/pb.MovieService/CreateMovieBidirectionalStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &movieServiceCreateMovieBidirectionalStreamClient{stream}
	return x, nil
}

type MovieService_CreateMovieBidirectionalStreamClient interface {
	Send(*CreateMovieRequest) error
	Recv() (*CreateMovieResponse, error)
	grpc.ClientStream
}

type movieServiceCreateMovieBidirectionalStreamClient struct {
	grpc.ClientStream
}

func (x *movieServiceCreateMovieBidirectionalStreamClient) Send(m *CreateMovieRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *movieServiceCreateMovieBidirectionalStreamClient) Recv() (*CreateMovieResponse, error) {
	m := new(CreateMovieResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *movieServiceClient) ListAllMovies(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*ListMoviesResponse, error) {
	out := new(ListMoviesResponse)
	err := c.cc.Invoke(ctx, "/pb.MovieService/ListAllMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetMovieById(ctx context.Context, in *GetMovieByIdRequest, opts ...grpc.CallOption) (*GetMovieByIdResponse, error) {
	out := new(GetMovieByIdResponse)
	err := c.cc.Invoke(ctx, "/pb.MovieService/GetMovieById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieServiceServer is the server API for MovieService service.
// All implementations must embed UnimplementedMovieServiceServer
// for forward compatibility
type MovieServiceServer interface {
	CreateMovie(context.Context, *CreateMovieRequest) (*CreateMovieResponse, error)
	CreateMovieStream(MovieService_CreateMovieStreamServer) error
	CreateMovieBidirectionalStream(MovieService_CreateMovieBidirectionalStreamServer) error
	ListAllMovies(context.Context, *Blank) (*ListMoviesResponse, error)
	GetMovieById(context.Context, *GetMovieByIdRequest) (*GetMovieByIdResponse, error)
	mustEmbedUnimplementedMovieServiceServer()
}

// UnimplementedMovieServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMovieServiceServer struct {
}

func (UnimplementedMovieServiceServer) CreateMovie(context.Context, *CreateMovieRequest) (*CreateMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMovie not implemented")
}
func (UnimplementedMovieServiceServer) CreateMovieStream(MovieService_CreateMovieStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateMovieStream not implemented")
}
func (UnimplementedMovieServiceServer) CreateMovieBidirectionalStream(MovieService_CreateMovieBidirectionalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateMovieBidirectionalStream not implemented")
}
func (UnimplementedMovieServiceServer) ListAllMovies(context.Context, *Blank) (*ListMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllMovies not implemented")
}
func (UnimplementedMovieServiceServer) GetMovieById(context.Context, *GetMovieByIdRequest) (*GetMovieByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovieById not implemented")
}
func (UnimplementedMovieServiceServer) mustEmbedUnimplementedMovieServiceServer() {}

// UnsafeMovieServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieServiceServer will
// result in compilation errors.
type UnsafeMovieServiceServer interface {
	mustEmbedUnimplementedMovieServiceServer()
}

func RegisterMovieServiceServer(s grpc.ServiceRegistrar, srv MovieServiceServer) {
	s.RegisterService(&MovieService_ServiceDesc, srv)
}

func _MovieService_CreateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).CreateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MovieService/CreateMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).CreateMovie(ctx, req.(*CreateMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_CreateMovieStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MovieServiceServer).CreateMovieStream(&movieServiceCreateMovieStreamServer{stream})
}

type MovieService_CreateMovieStreamServer interface {
	SendAndClose(*ListMoviesResponse) error
	Recv() (*CreateMovieRequest, error)
	grpc.ServerStream
}

type movieServiceCreateMovieStreamServer struct {
	grpc.ServerStream
}

func (x *movieServiceCreateMovieStreamServer) SendAndClose(m *ListMoviesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *movieServiceCreateMovieStreamServer) Recv() (*CreateMovieRequest, error) {
	m := new(CreateMovieRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MovieService_CreateMovieBidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MovieServiceServer).CreateMovieBidirectionalStream(&movieServiceCreateMovieBidirectionalStreamServer{stream})
}

type MovieService_CreateMovieBidirectionalStreamServer interface {
	Send(*CreateMovieResponse) error
	Recv() (*CreateMovieRequest, error)
	grpc.ServerStream
}

type movieServiceCreateMovieBidirectionalStreamServer struct {
	grpc.ServerStream
}

func (x *movieServiceCreateMovieBidirectionalStreamServer) Send(m *CreateMovieResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *movieServiceCreateMovieBidirectionalStreamServer) Recv() (*CreateMovieRequest, error) {
	m := new(CreateMovieRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MovieService_ListAllMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).ListAllMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MovieService/ListAllMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).ListAllMovies(ctx, req.(*Blank))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetMovieById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovieByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetMovieById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MovieService/GetMovieById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetMovieById(ctx, req.(*GetMovieByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieService_ServiceDesc is the grpc.ServiceDesc for MovieService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MovieService",
	HandlerType: (*MovieServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMovie",
			Handler:    _MovieService_CreateMovie_Handler,
		},
		{
			MethodName: "ListAllMovies",
			Handler:    _MovieService_ListAllMovies_Handler,
		},
		{
			MethodName: "GetMovieById",
			Handler:    _MovieService_GetMovieById_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateMovieStream",
			Handler:       _MovieService_CreateMovieStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "CreateMovieBidirectionalStream",
			Handler:       _MovieService_CreateMovieBidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service_movies_manager_api.proto",
}
